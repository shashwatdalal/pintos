static void
page_fault(struct intr_frame *f) {
  bool not_present;  /* True: not-present page, false: writing r/o page. */
  bool write;        /* True: access was write, false: access was read. */
  bool user;         /* True: access by user, false: access by kernel. */
  void *fault_addr;  /* Fault address. */

  /* Obtain faulting address, the virtual address that was
     accessed to cause the fault.  It may point to code or to
     data.  It is not necessarily the address of the instruction
     that caused the fault (that's f->eip).
     See [IA32-v2a] "MOV--Move to/from Control Registers" and
     [IA32-v3a] 5.15 "Interrupt 14--Page Fault Exception
     (#PF)". */
  asm ("movl %%cr2, %0" : "=r" (fault_addr));

  /* Turn interrupts back on (they were only off so that we could
     be assured of reading CR2 before it changed). */
  intr_enable();

  /* Count page faults. */
  page_fault_cnt++;

  /* Determine cause. */
  not_present = (f->error_code & PF_P) == 0;
  write = (f->error_code & PF_W) != 0;
  user = (f->error_code & PF_U) != 0;

  void *fault_page_kvaddr = (uint32_t) fault_addr & PAGE_NUM_MASK;
  void *fault_offset = (uint32_t) fault_addr & OFFSET_MASK;

  void *next_instr = f->eip;
  void *esp = f->esp;

//     printf("\n\t\tPHYS_BASE:      %p\n", PHYS_BASE);
//     printf("\t\tPAGESIZE:       %p\n", PGSIZE);
//     printf("\t\tSTCACK:M:       %p\n", STACK_LIMIT);
//     printf("\t\tfault_addr (p): %p \n", fault_addr);
//     printf("\t\tesp (p):        %p\n", esp);
//     printf("\t\tnext_instr (p): %p\n", next_instr);
//     printf("\t\tnot_present: %i | write: %i | user: %i \n", not_present, write, user);
//     printf("\t\tfault_page_kvaddr (p): %p\n", fault_page_kvaddr);
//     printf("\t\tfault_offset (p):      %p\n\n", fault_offset);

//    printf("\t\t\t>>>>>>>>>>>>>>>>>>>>>>>> FAULTING\n");
  // TODO: What if we're the kernel looking for a page we don't own
  //  >> Can this ever happen?
  void *page_top =
    (((uint32_t) fault_page_kvaddr / (uint32_t) PGSIZE)) * (uint32_t) PGSIZE;

  bool page_not_on_disk =
    spt_find_elem(&thread_current()->spt, fault_page_kvaddr) == NULL;

  if (page_not_on_disk && !write) {

    // The thread is attempting to read a page that doesn't exist
//    printf("attempt to write\n");
    invalid_state();
    NOT_REACHED();
  }

<<<<<<< HEAD

  if (not_present && !page_not_on_disk) {
    // At this point we know the page is on disk and the thread has rights to it
    // so all we do is move the page into RAM
    block_sector_t target_block =
            spt_find_elem(&thread_current()->spt,page_top)->address;

//    printf("Page type > %d \n", spt_get_state(&thread_current()->spt, page_top));

    if (spt_get_state(&thread_current()->spt, page_top) == UNLOADED_EXECUTABLE) {
      // Lazy loading executables
//      printf("Lazy-loading\n");
      /* Get a page of memory. */
      uint8_t *kpage = palloc_get_page(PAL_USER);
      if (kpage == NULL)
        PANIC ("Page allocation failed : expection.c -> page_fault");

      /* Load this page. */
      struct file *file = thread_current()->executable;
      uint32_t ofs = spt_get_offset(&thread_current()->spt, page_top);

      file_seek(file, ofs);


      int actual_read_bytes = file_read(file, kpage,
                        spt_get_read_bytes(&thread_current()->spt, page_top));

      memset(kpage + actual_read_bytes, 0, (uint32_t) PGSIZE - actual_read_bytes);

//      printf(">>>>>>>>>>>>>Added ofs:%p at upage: %p rdbyts: %u\n", ofs, page_top, actual_read_bytes);
      bool writable = spt_get_writable(&thread_current()->spt, page_top);

      if (pagedir_get_page(thread_current()->pagedir, page_top) == NULL
          && pagedir_set_page(thread_current()->pagedir, page_top, kpage, writable)) {
        //add to frame table

        frame_add(page_top, kpage);
        //add to supp page table

        spt_set_in_frame(&thread_current()->spt, page_top, kpage);

      } else {
        PANIC("jdljaskad");
      }

//      printf("Reached End of Lazy Loading.\n");

      return;
    }

    if (frame_is_full()) {
//      printf("full frame\n");
      evict_and_swap_page(target_block);
    } else {
      void* dst_kvaddr = find_free_user_frame();
//      printf("Evicting user frame\n");
      swap_bring_sector_to_frame(dst_kvaddr,target_block);
    }

    // Jump back to esp and continue (don't change esp so the offending
    // instruction is re-tried)
    // printf(">>>Jumping back to esp (page brought in)\n");
    return;
    NOT_REACHED();
=======
//
  if (not_present && !page_not_on_disk && user) {
    // At this point we know the page is on disk and the thread has rights to it
    // so all we do is move the page into RAM
    struct spt_elem *_spt_elem = spt_find_elem(&thread_current()->spt,
                                               fault_page_kvaddr);
    if (_spt_elem->state == IN_SWAP) {
      // bring page from swap
      block_sector_t target_block =
        spt_find_elem(&thread_current()->spt, fault_page_kvaddr)->address;

      if (frame_is_full()) {
        evict_and_swap_page(target_block);
      } else {
        void *dst_kvaddr = find_free_user_frame();
        swap_bring_sector_to_frame(dst_kvaddr, target_block);
      }
    } else if (_spt_elem->state == IN_FILESYS) {
      //lazy-load
      //find frame to replace
      void *dst_kvaddr = palloc_get_page(PAL_USER);
      //printf("got frame:\n");
      //read file into frame
      frame_add(pg_round_down(fault_addr), dst_kvaddr);
      //printf("mmap_id: %u\n",_spt_elem->address);
      struct mmap_elem *_mmap_elem = mmap_get(thread_current(),
                                              _spt_elem->address);
      int fd = _mmap_elem->fd;
      //printf("got fd:\n\n");
      struct file *_file = thread_get_file(thread_current(), fd);
      //printf("got file:\n\n");
      //read page depending on whether or not last elem of page
      //add page to pagedir
      pagedir_set_page(thread_current()->pagedir, pg_round_down(fault_addr),
                       dst_kvaddr, 1);
      //printf("set page\n\n");
      _spt_elem->state = MMAP_IN_FRAME;
      //printf("changed state: \n\n");
      int page_number =
        ((unsigned) (pg_round_down(fault_addr) - _mmap_elem->uvaddr) /
         PGSIZE) + 1;
      if (page_number == _mmap_elem->number_of_pages) {
        //final page
        file_read_at(_file, pg_round_down(fault_addr),
                     file_length(_file) % PGSIZE, PGSIZE * (page_number - 1));
      } else {
        //any other page
        file_read_at(_file, pg_round_down(fault_addr), PGSIZE,
                     PGSIZE * (page_number - 1));
      }
      return;
    }
>>>>>>> mmapdebug
  }


  // Jump back to esp and continue (don't change esp so the offending
  // instruction is re-tried)
  // printf(">>>Jumping back to esp (page brought in)\n");
  asm volatile ("movl %0, %%esp; jmp intr_exit" : /*No output */ :  "g" (esp) : "memory");
  NOT_REACHED();

  if (write && user) {
<<<<<<< HEAD
    // The user is trying to write to memory it does not have access to
    if (!is_valid_stack_jump(fault_addr, esp)) {
      // Potentially malicious program, shut it down
=======
// The user is trying to write to memory it does not have access to
// printf("Potentially stack growth\n");
    bool is_valid_stack_jump =
      (uint32_t) esp - (uint32_t) fault_addr <= (uint32_t) MAX_JUMP_SIZE;
    if (!is_valid_stack_jump) {
// Potentially malicious program, shut it down
//printf(">>>Invalid jump size\n");
>>>>>>> mmapdebug
      invalid_state();

      NOT_REACHED();
    }

<<<<<<< HEAD
    // Check if the stack access is less than the stack size limit
    // (8MB by default) NOTE: This assumes esp is in user space of KVM
    if ((uint32_t) PHYS_BASE - (uint32_t) fault_addr > (uint32_t) STACK_LIMIT) {
      printf("Stack growing too large");
      invalid_state();
    }

    int num_pages_needed =
            ((uint32_t) PHYS_BASE - (uint32_t) page_top) / PGSIZE - thread_current()->num_stack_pages;

    void *new_page = palloc_get_multiple(PAL_USER, num_pages_needed);
    for (int i = 0; i < num_pages_needed; i++) {
      void *page_uaddr = page_top + i * PGSIZE;
      void *page_kaddr = new_page + i * PGSIZE;
=======

// Check if the stack access is less than the stack size limit
// (8MB by default) NOTE: This assumes esp is in user space of KVM
    if ((uint32_t) PHYS_BASE - (uint32_t) esp < (uint32_t) STACK_LIMIT) {
// static int a = 0;
// a++;
// printf("--------------------a: %d", a);
// printf("(1)\n");
      int num_pages_needed =
        ((uint32_t) PHYS_BASE - (uint32_t) page_top) / PGSIZE -
        thread_current()->num_stack_pages;
      void *new_page = palloc_get_multiple(PAL_USER, num_pages_needed);
// printf("page_top: %p\n", page_top);
      for (
        int i = 0;
        i < num_pages_needed;
        i++) {
        if (!
          process_install_page(page_top
                               + i * PGSIZE, new_page + i * PGSIZE, true,
                               STACK)) {
          PANIC("Installing page failed : exception.c -> page_fault()");
        }
      }

      thread_current()->num_stack_pages +=
        num_pages_needed;

// f->esp = esp + 0x4;
// printf("ESP %p\n", f->esp);/
// Jump back to the fault address and continue
// printf("\t\t\t>>>Stack grown\n");
>>>>>>> mmapdebug

      if (!process_install_page(page_uaddr, page_kaddr, true, STACK)) {
        PANIC("Installing page failed : exception.c -> page_fault()");
      }
    }

    thread_current()->num_stack_pages += num_pages_needed;

    return;
    NOT_REACHED();
  }

<<<<<<< HEAD
  bool is_zero_p = spt_is_zero_page(&thread_current()->spt, page_top);
  if (!write && is_zero_p) {
    // Load result
    f->eax = 0;
    // Jump to *next* instruction
    f->esp = f->eip;
    return;
=======
//bool is_zero_p = is_zero_page(fault_page_number);
  bool is_zero_p = true;
  if (!write && is_zero_p) {
    f->
      eax = 0;
// Jump to *next* instruction
    f->
      esp = f->eip; // TODO: Do I need to increment eip?
// printf(">>>Using zero (0) result rather than loading page\n");
    asm volatile ("movl %0, %%esp; jmp intr_exit" : /*No output */
    :  "g" (next_instr)
    : "memory");
>>>>>>> mmapdebug
    NOT_REACHED();
  }

  if (user) {
    invalid_state();

  }

  f->
    eip = f->eax;
  f->
    eax = 0xffffffff;
}

